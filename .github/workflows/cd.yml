name: Django CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.EC2_KEY }}

      - name: Set up Docker Compose on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          mkdir -p /home/${{ secrets.EC2_USER }}/app &&
          cd /home/${{ secrets.EC2_USER }}/app &&
          echo 'MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}' > .env &&
          echo 'DATABASE_NAME=${{ secrets.DATABASE_NAME }}' >> .env &&
          echo 'DATABASE_USER=${{ secrets.DATABASE_USER }}' >> .env &&
          echo 'DATABASE_PASS=${{ secrets.DATABASE_PASS }}' >> .env &&
          echo \"SECRET_KEY='${{ secrets.SECRET_KEY }}'\" >> .env &&
          echo 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' >> .env &&
          echo 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' >> .env &&
          echo 'AWS_S3_REGION_NAME=${{ secrets.AWS_S3_REGION_NAME }}' >> .env &&
          echo 'AWS_STORAGE_BUCKET_NAME=${{ secrets.AWS_STORAGE_BUCKET_NAME }}' >> .env
          "

      - name: Copy Docker Compose file and NGINX config to EC2
        run: |
          scp -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app/
          scp -o StrictHostKeyChecking=no nginx/nginx.conf ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/home/${{ secrets.EC2_USER }}/app/nginx/

      - name: Deploy to Blue environment on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          cd /home/${{ secrets.EC2_USER }}/app &&
          docker-compose up -d --build backend-blue &&
          docker-compose exec nginx nginx -s reload
          "

      - name: Wait for Blue environment to be ready
        run: sleep 60

      - name: Deploy to Green environment on EC2
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} "
          cd /home/${{ secrets.EC2_USER }}/app &&
          docker-compose up -d --build backend-green &&
          docker-compose exec nginx nginx -s reload
          "
