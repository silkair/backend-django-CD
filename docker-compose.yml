version: "3.8"

services:
  mysqldb:
    build: ./db
    container_name: mysqldb
    env_file:
      - "./db/.env"
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql

  backend-blue:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-blue
    ports:
      - "8001:8000"
    volumes:
      - ./:/app
      - ./logs:/app/logs
    restart: always
    depends_on:
      - mysqldb
      - rabbitmq
      - redis
    command: >
      bash -c "python wait_mysql.py &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      gunicorn -w 4 -b 0.0.0.0:8000 backend.wsgi:application"

  backend-green:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend-green
    ports:
      - "8002:8000"
    volumes:
      - ./:/app
      - ./logs:/app/logs
    restart: always
    depends_on:
      - mysqldb
      - rabbitmq
      - redis
    command: >
      bash -c "python wait_mysql.py &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      gunicorn -w 4 -b 0.0.0.0:8000 backend.wsgi:application"

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
    restart: always
    depends_on:
      - backend-blue
      - backend-green
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  rabbitmq:
    image: "rabbitmq:3-management"
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
      - "15692:15692"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    command: >
      bash -c "rabbitmq-plugins enable rabbitmq_prometheus &&
      rabbitmq-server"

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: celery
    volumes:
      - ./:/app
      - ./logs:/app/logs
    restart: always
    depends_on:
      - backend-blue
      - rabbitmq
      - redis
    command: celery -A backend worker --loglevel=info --uid=nobody

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    depends_on:
      - backend-blue

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    ports:
      - "9100:9100"
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points="^/(sys|proc|dev|host|etc)($$|/)'

  cadvisor:
    image: gcr.io/cadvisor/cadvisor
    container_name: cadvisor
    ports:
      - "8080:8080"
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
      - /var/lib/docker/:/var/lib/docker:ro
    restart: unless-stopped

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.17.9
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  logstash:
    image: docker.elastic.co/logstash/logstash:7.17.9
    container_name: logstash
    volumes:
      - ./logstash/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash/logstash.yml:/usr/share/logstash/config/logstash.yml
      - ./logs:/usr/share/logstash/logs
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch

  kibana:
    image: docker.elastic.co/kibana/kibana:7.17.9
    container_name: kibana
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

volumes:
  mysql_data:
  rabbitmq_data:
  grafana_data:
  elasticsearch_data:
